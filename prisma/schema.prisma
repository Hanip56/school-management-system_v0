// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)
  hidden   Boolean  @default(false)
  student  Student?
  teacher  Teacher?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?            @unique @db.ObjectId
  classes           StudentClass[]
  attendanceRecords AttendanceRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String         @unique @db.ObjectId
  sessions LearnSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  yearStart DateTime
  yearEnd   DateTime
  active    Boolean  @default(false)
  classes   Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  name    String         @unique
  session LearnSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  academicYearId String         @db.ObjectId
  students       StudentClass[]
  sessions       LearnSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, academicYearId])
}

model StudentClass {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String  @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearnSession {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  timeStart         DateTime
  timeEnd           DateTime
  teacher           Teacher            @relation(fields: [teacherId], references: [id])
  teacherId         String             @db.ObjectId
  subject           Subject            @relation(fields: [subjectId], references: [id])
  subjectId         String             @db.ObjectId
  class             Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId           String             @db.ObjectId
  attendanceRecords AttendanceRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceRecord {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String           @db.ObjectId
  session   LearnSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String           @db.ObjectId
  status    AttendanceStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
