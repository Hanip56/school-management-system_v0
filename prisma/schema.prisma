// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum SexType {
  MALE
  FEMALE
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)
  hidden   Boolean  @default(false)
  student  Student?
  teacher  Teacher?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.ObjectId

  firstName String
  lastName  String?
  phone     String   @unique
  address   String
  birthday  DateTime
  sex       SexType

  classes           StudentClass[]
  attendanceRecords AttendanceRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  firstName String
  lastName  String?
  phone     String   @unique
  address   String
  birthday  DateTime
  sex       SexType

  lessons  Lesson[]
  subjects SubjectTeachers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  label        String         @unique
  yearStart    DateTime
  yearEnd      DateTime
  active       Boolean        @default(false)
  classes      Class[]
  StudentClass StudentClass[]
  subjects     Subject[]
  Lesson       Lesson[]
  Exam         Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String            @unique
  lessons        Lesson[]
  teachers       SubjectTeachers[]
  academicYearId String            @db.ObjectId
  AcademicYear   AcademicYear      @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, academicYearId])
}

model SubjectTeachers {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String  @db.ObjectId
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId])
}

model Class {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  academicYear     AcademicYear       @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  academicYearId   String             @db.ObjectId
  students         StudentClass[]
  lessons          Lesson[]
  AttendanceRecord AttendanceRecord[]
  Exam             Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, academicYearId])
}

model StudentClass {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId        String       @db.ObjectId
  student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String       @db.ObjectId
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, academicYearId])
}

model Lesson {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  timeStart      DateTime
  timeEnd        DateTime
  teacher        Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId      String       @db.ObjectId
  subject        Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId      String       @db.ObjectId
  class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId        String       @db.ObjectId
  academicYearId String       @db.ObjectId
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceRecord {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String           @db.ObjectId
  class     Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String           @db.ObjectId
  status    AttendanceStatus
  date      DateTime
  remarks   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  class          Class?       @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId        String?      @db.ObjectId
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  academicYearId String       @db.ObjectId
  grades         Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  fromPercentage Int
  toPercentage   Int

  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
